#!/usr/bin/env perl
# -*- Mode: cperl; cperl-indent-level:4; tab-width: 8; indent-tabs-mode: nil -*-
# -*- coding: utf-8 -*-
# vim: set tabstop 8 expandtab:

# This is part of pantheon-runapp
# Copyright (c) 2016 JEON Myoungjin <jeongoon@gmail.com>

use 5.012;
use strict; use warnings;
use boolean;
use FindBin;
use feature qw(switch);
use Fcntl ':flock';
use File::HomeDir;
use File::Spec;
use File::Which;
use Time::HiRes qw(usleep);
use OptArgs;
use File::Spec;
use lib ( File::Spec->catfile( $FindBin::RealBin, '..', 'lib' ) );
use PantheonDE::RunApp
  ( -AppName => 'focuswin',
    -Debug   => true,
    -Verbose => true,
    qw(fs getClockNow prepareConfigDirectory :msg)
  );

our @BinaryArgs;
our $xdotool_prog;

$xdotool_prog = File::Which::which( 'xdotool' );
if ( not defined $xdotool_prog ) {
    # undef when it does not find the executable
    leave "please install: xdotool";
}

# record index names ...
sub F_TIMEADDED () { 0 }
sub F_FOCUSED   () { 1 }

my  $i = 0;
for $i ( 0 .. $#ARGV ) {
    if ( defined $ARGV[$i] and $ARGV[$i] eq '--' ) {
        dmsg "Found `--':".
          " save rest arguments as Executable arguments separately";
        last;
    }
}

if ( $i > 0 and $i != scalar @ARGV ) {
    @BinaryArgs = splice( @ARGV, $i );
    shift @BinaryArgs; # shift `--' because we don't need it.
}

my @focus_modes = qw(last prev new);
my $focus_modes_list_ = "[ " . join( ", ", @focus_modes ) . " ]";

opt focus =>
  ( isa         => 'Str',
    default     => 'last',
    comment     =>  "Focus modes: $focus_modes_list_" );

#opt check_windowsize =>
#  ( isa         => 'Bool',
#    default     =>  1,
#    comment     => 'Check window size after searching by name' );

arg name =>
  ( isa         => 'Str',
    required    => 1,
    comment     => 'Search string for window [class] name' );

arg bin =>
  ( isa         => 'Str',
    required    => 1,
    comment     => 'Executable programme for name: for newly-created window'
  );

my $opts = optargs;

our $FocusMode  = $opts->{'focus'};
our $SearchName = $opts->{'name'};
our $BinaryName = $opts->{'bin'};

# private:
sub search_window_by_class_ {
    my $key = pop;
    my $result = qx($xdotool_prog search --onlyvisible --class $key);
    split( $/, $result );
}

sub search_window_by_pid_ {
    my $key = pop;
    my $result = qx($xdotool_prog search --pid $key);
    split( $/, $result );
}

sub get_window_geometry_ {
    my $window_id = pop;
    my $result = qx($xdotool_prog getwindowgeometry $window_id);
    return( $result =~ m/Position: (\d+),(\d+).*Geometry: (\d+)x(\d+)/s );
}

sub get_active_window_id_ () {
    my $result = qx($xdotool_prog getactivewindow);
    chomp $result;
    $result;
}

sub focus_raise_window_ {
    my $window_id = pop;
    my $result = qx($xdotool_prog windowactivate $window_id)
}

# main;
if ( scalar( grep( /$FocusMode/, @focus_modes ) ) <= 0 ) {
    leave "Invalid \$FocusMode ($FocusMode): use one of $focus_modes_list_";
}

my @window_ids = search_window_by_class_( $SearchName );

my $check_window_size_  = false;
my $minimum_window_width = 100;
my $minimum_window_height = 100;

my @windows_found;
# time stamp for windows which is addded to list newly.
my $timestamp_new = getClockNow();

my $config_dir = prepareConfigDirectory( getAppName() );
if ( ! -d $config_dir ) {
    leave "could not prepare configuration directory: $config_dir";
}
my $windowRecordFile = fs->catfile( $config_dir, $SearchName.'.rec' );

each_window_id:
for my $wid ( @window_ids ) {
    # find proper biggest window in visible
    my @poor_geom = get_window_geometry_( $wid );
    if ( scalar @poor_geom != 4 ) {
        dmsg "FIXME: couldn't find geometry from $wid";
        next each_window_id;
    }
    if ( $check_window_size_
         and (  $poor_geom[2] < $minimum_window_width and
                $poor_geom[3] < $minimum_window_height ) ) {
        dmsg "FIXME: window($wid) does not have enough visible window: skipped.";
        next each_window_id;
    }

    push @windows_found, $wid;
}

my $total_windows_found = scalar @windows_found;
$total_windows_found > 0 and
  info "found windows for the search key ($SearchName):".
  " total $total_windows_found window(s): @windows_found";

# XXX: already sorted?
my @windows_found_copy = sort @windows_found;

# get last window list
# window list looks like ...

# 00000000 #timestamp# -
# 00000001 #timestamp# *  -> last focused
# 00000002 #timestamp# -
# 00000003 #timestamp# -

# so we can group the windows by
#   o last focused window
#   o second last focused window
#   o other windows

my @last_windows_record = ();
my ( $last_window_focused, $new_window_to_focus,
     @current_windows_list, %current_windows_info );

sub lock_record_ ($) {
    my $fh = pop;
    leave "no file handle given: $fh" if not defined $fh;

  locking_file:
    {
        if ( ! flock $fh, LOCK_EX|LOCK_NB ) {
            dmsg( "windows record file is locked: trying in 100 usec." );
            usleep( 100 );
            redo locking_file;
        }
    }
    return true; # always ??
}


if ( -r $windowRecordFile
     and open my $record_fh, '<:encoding(UTF-8)', $windowRecordFile ) {

    lock_record_( $record_fh );

    my $line_sep = $/;
    local $/ = undef;
    my $data = <$record_fh>;
    @last_windows_record = split ( $line_sep, $data );
    flock $record_fh, LOCK_UN;
    close $record_fh;
}
else {
    info "do not have or can not find a record file yet:".
      " windows record is empty.";
}

windows_record_:
for my $ri ( 0 .. $#last_windows_record ) {
    $last_windows_record[$ri] =~
      m/(\d+)\s([\d\.]+)(?:\s([\*-]))$/;

    my ( $window_id, $timestamp_rec, $focus_status ) = ( $1, $2, $3 );

    if ( not defined $window_id ) {
       info "unrecognized line: $ri: $last_windows_record[$ri]";
        next;
    }
    my $still_exists_ = false;

    for my $wi ( 0 .. $#windows_found_copy ) {
        if ( defined $windows_found_copy[$wi]
             and $window_id eq $windows_found_copy[$wi] ) {
            $still_exists_ = true;
            $windows_found_copy[$wi] = undef;
            last;
        }
    }

    if ( not $still_exists_ ) {
        info "window has been destroyed: $window_id: removed fom the list";
        next windows_record_;
    }

    if ( $focus_status eq '*' ) {
        $last_window_focused = $window_id;
    }


    push @current_windows_list, $window_id;
    # note: reset focus status to '-';
    $current_windows_info{$window_id} = [ $timestamp_rec, '-' ];
}

# add newly-created windows to the list
for my $wid ( @windows_found_copy ) {
    next if not defined $wid;

    push @current_windows_list, $wid;
    $current_windows_info{$wid} = [ $timestamp_new, '-' ];
}

# sort by timestamp
@current_windows_list = sort {
    # descend order: so newer window has lower
    $current_windows_info{$b}[F_TIMEADDED]
      <=> $current_windows_info{$a}[F_TIMEADDED];
} @current_windows_list;



my $active_window_id = get_active_window_id_();

info "current focus mode is: `$FocusMode'";

# re-check focus mode if necessary
if ( defined $last_window_focused
     and $last_window_focused == $active_window_id
     and $FocusMode eq 'last' ) {
    info "Trying to focus last focused window($last_window_focused)".
      " but which still has focus".
      ": try to focus second last focused window";
    $FocusMode = 'prev';
}

make_new_window:
if ( $FocusMode eq 'new' ) {
    # anyway we want to create a new window
    my $pid = fork;
    if ( not defined $pid ) {
        leave "Could not fork";
    }
    if ( $pid == 0 ) { # child process
        dmsg "in child process.";
        {
            no warnings 'exec';
            info "leaving ...: execute new application: $BinaryName";
            exec( $BinaryName, @BinaryArgs );
        }
    }
    else { # parent process
        $new_window_to_focus = -1;
        info "child process id: $pid";
        dmsg "new windows supposed to have focus when created";
    }
}
elsif ( $FocusMode eq 'prev' ) {
    # find the window in the current window list
    # and focus previous window
    # note: current window list is sorted by time descending order.
    my $curr_wid = $last_window_focused || $active_window_id;

    my $maybe_found_wid = undef;
    for my $wi ( 0 .. $#current_windows_list ) {
        if ( $current_windows_list[$wi] == $curr_wid ) {
            $maybe_found_wid = $current_windows_list[ $wi + 1 ];
            # $wi + 1 : it may be out range of the scope but we will check later
            last;
        }
    }
    $maybe_found_wid ||= $current_windows_list[0];

    # still chance to undefined but no worries.
    # we don't have any window to focus now.
    $new_window_to_focus = $maybe_found_wid;
}
else { # must be $FocusMode eq 'last'
    if ( defined $last_window_focused ) {
        info "last focused window is ready to be focused again";
        $new_window_to_focus = $last_window_focused;
    }
    else {
        # try most recently added window
        info "Try most recently added window";
        $new_window_to_focus = $current_windows_list[0];
    }
}

if ( defined $new_window_to_focus ) {
    if ( $new_window_to_focus == 0 or $FocusMode eq 'new' ) {
        info "Skip focusing window";
    }
    else {
        info "Focusing window ($new_window_to_focus)";
        focus_raise_window_( $new_window_to_focus );
    }
}
else {
    info "No window to focus: try to make a new window ...";
    $FocusMode = 'new';
    goto make_new_window;
}

# update windows list
info "Update windows list ...";
# note: already dead if we don't have $new_window_to_focus;
${$current_windows_info{ $new_window_to_focus }}[ F_FOCUSED ] = '*';


open my $record_fh, '>', $windowRecordFile
  or leave "could not write the record($windowRecordFile): $!";

lock_record_( $record_fh );

for my $rec ( @current_windows_list ) {
    my $line = join( " ",  $rec, @{$current_windows_info{$rec}} );
    if ( isDebugging ) { say STDERR $line; }
    say $record_fh $line;

}

my $len_rec = scalar @current_windows_list;
info "Total $len_rec record".( $len_rec >1 ? "s" : "")." written.";

flock $record_fh, LOCK_UN;
close $record_fh;

exit 0;
