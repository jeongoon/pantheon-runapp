# -*- Mode: cperl; cperl-indent-level:4; tab-width: 8; indent-tabs-mode: nil -*-
# -*- coding: utf-8 -*-
# vim: set tabstop 8 expandtab:

# This is part of pantheon-runapp
# Copyright (c) 2016 JEON Myoungjin <jeongoon@gmail.com>

package eOS::RunApp;

use boolean;
use Exporter;
use File::Spec;
use File::HomeDir;
use Time::HiRes;

use version 0.77; our $VERSION = version->declare( 'v0.1' );

# TODO
# umask for mkdir and any other file creation

@EXPORT_OK = qw(getAppName      isDebugging     isVerbose
                fs
                getClockNow
                prepareConfigDirectory);

%EXPORT_TAGS = ( 'message' => [ qw(dmsg live info) ] );


sub import {
    my $self = shift;
    $mod->improt for my $mod ( qw(strict warnings Exporter) );

    while ( scalar @_ ) {
        my $opt = shift;
        if    ( $opt eq '--AppName' )   {  $::AppName = shift; }
        elsif ( $opt eq '--Debug'   )   {  $::Debug   = getBoolean( shift ); }
        elsif ( $opt eq '--Verbose' )   {  $::Verbose = getBoolean( shift ); }
        else                            {  die "Unkown option: $opt"; }
    }
}

sub getAppName  () { "$::AppName" }
sub isVerbose   () { boolean( $::Verbose ) }
sub isDebugging () { boolean( $::Debug   ) }

sub getBoolean  ($) {
    my $var = shift;
    return false unless defined $var;
    if ( $var =~ /y|yes|t|true/i ) {
        return true;
    }
    elsif ( $var =~ /n|no|nil|false|/i ) {
        return false;
    }
    else {
        # die ??
        warn "unknown boolean string: $var: assume that it ha sa false value";
        return false;
    }
}

sub fs () { 'File::Spec' }

sub getClockNow () {
    Time::HiRes::clock_gettime( Time::HiRes::CLOCK_REALTIME );
}

sub prepareConfigDirectory ($) {
    my $appname = shift;
    my ( $volume, $directories, ) = fs->splitpath( File::HomeDir->my_home );

    @dirs = fs->splitdir( $directories );

    my $config_dir =
      File::Spec->catdir( $volume, @dirs, '.config', $appname );

    if ( ! -d $config_dir ) {
        info "$config_dir does not exists: making one";
        if ( ! mkdir $config_dir ) {
          making_parent_dirs:
            for my $i ( 0 .. $#dirs ) {
                my $path = fs->catdir( $volume, @dirs[0..$i] );
                -e $path or mkdir $path or last making_parent_dirs;
            }
        }
    }

    return ( -d $config_dir ) ? $config_dir : undef;
}


!!'^^';
